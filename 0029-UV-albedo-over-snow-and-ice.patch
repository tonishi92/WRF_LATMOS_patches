From 3c65fc0db2618071734a43529de46ddeac3937d4 Mon Sep 17 00:00:00 2001
From: Tatsuo ONISHI <onishi@latmos.ipsl.fr>
Date: Wed, 5 Oct 2022 21:47:05 +0200
Subject: [PATCH 29/71] UV albedo over snow and ice

TYPE : Updates

list of modified files:
---------------------------------------------------------------------------------
chem/chem_driver.F
   * UV albedo over snow and ice : pass snowh, snowc, xice, lu_index
     to photolysis_driver in chem/photolysis_driver.F

chem/chemics_init.F
   * fastj_landinit from module_phot_fastj is added
   * fastj_landinit: initialization routine for fastj photolysis
     (phot_opt = PHOTFASTJ (Varying surface albedo).

chem/photolysis_driver.F
   * Implementation of a higher surface UV-albedo over snow/ice covered surfaces
     in Fast-J photolysis. Concerned variables : snowh, snowc, xice, lu_index

phys/module_mp_morr_two_moment.F
   * Debug: SR is confined to the range [0,1]. In particular, for SNOWRT1D << 1.
   * Relevent scheme noahlsm

phys/module_sf_noahdrv.F
   * Comment out FFROZP=SR(I,J)

phys/module_sf_noah_seaice_drv.F
   * Comment out FFROZP=SF(I,J)

phys/module_surface_driver.F
   * Comment out frpcpn = .true. :
     otherwise possibly causing SR to be zero and
     the cumulus precipitation is never considered as snow.
---
 chem/chem_driver.F               |  3 +++
 chem/chemics_init.F              | 10 ++++++++++
 chem/photolysis_driver.F         | 17 +++++++++++++++++
 phys/module_mp_morr_two_moment.F | 10 +++++++++-
 phys/module_sf_noah_seaice_drv.F |  9 +++++----
 phys/module_sf_noahdrv.F         |  9 ++++-----
 phys/module_surface_driver.F     | 12 +++++++++---
 7 files changed, 57 insertions(+), 13 deletions(-)

diff --git a/chem/chem_driver.F b/chem/chem_driver.F
index 29a2edb..1259c4b 100755
--- a/chem/chem_driver.F
+++ b/chem/chem_driver.F
@@ -1206,6 +1206,9 @@
               config_flags%track_tuv_num,                                             &
               grid%radfld,grid%adjcoe,grid%phrate,                                    &
               grid%track_wc,grid%track_zref,                                          &
+!lm
+              grid%snowh, grid%snowc, grid%xice, grid%LU_INDEX,                       &
+!lm
               grid%tauaer1,grid%tauaer2,grid%tauaer3,grid%tauaer4,                    &
               grid%gaer1,grid%gaer2,grid%gaer3,grid%gaer4,                            &
               grid%waer1,grid%waer2,grid%waer3,grid%waer4,                            &
diff --git a/chem/chemics_init.F b/chem/chemics_init.F
index a385429..64b2eb4 100755
--- a/chem/chemics_init.F
+++ b/chem/chemics_init.F
@@ -64,6 +64,9 @@
 
    USE module_ftuv_driver, only : ftuv_init
    USE module_phot_tuv,    only : tuv_init
+!lm Update dependencies
+   USE module_phot_fastj, only: fastj_landinit
+!lm
    USE module_mozcart_wetscav, only : wetscav_mozcart_init
    USE module_aerosols_sorgam
    USE module_aerosols_soa_vbs, only: aerosols_soa_vbs_init
@@ -809,6 +812,13 @@ end if
 
         call ftuv_init( id, its, ite, jts, jte, kte, &
                   ide, jde, config_flags,config_flags%num_land_cat,mminlu_loc )
+
+!lm Add an initialization routine for fastj photolysis, in order to use varying
+!surface albedo
+      CASE (PHOTFASTJ)
+        CALL wrf_debug(00,'call fastj phot initialization')
+        call fastj_landinit( id, config_flags%num_land_cat,mminlu_loc )
+!lm
      CASE (TUV)
        if( config_flags%cld_od_opt > 3 .or. config_flags%cld_od_opt < 1 ) then
          call wrf_error_fatal("cld_od_opt must be {1,2,3}")
diff --git a/chem/photolysis_driver.F b/chem/photolysis_driver.F
index 5603777..a7973f4 100755
--- a/chem/photolysis_driver.F
+++ b/chem/photolysis_driver.F
@@ -1,5 +1,7 @@
 !WRF:MODEL_LAYER:CHEMISTRY
 !
+!lm Louis Marelle 2016/5/11: In Fast-J photolysis, use a higher surface
+!   UV-albedo over snow- and ice-covered surfaces.
       SUBROUTINE photolysis_driver (id,curr_secs,ktau,dtstep,            &
                config_flags,haveaer,                                     &
                dt_cld,af_dir,af_dn,af_up,par,erythema,                   &
@@ -23,6 +25,10 @@
                nref0, nw0, tuv_jmax0,                                    &
                ph_radfld, ph_adjcoe, ph_prate,                           &
                wc, zref,                                                 &
+!lm Add snow height, snow cover and ice fraction to photolysis in order to
+!   calculate snow- and ice-dependent UV albedos in Fast-J
+               snowh, snowc, xice, lu_index,                                       &
+!lm
                tauaer1,tauaer2,tauaer3,tauaer4,                          &
                gaer1,gaer2,gaer3,gaer4,                                  &
                waer1,waer2,waer3,waer4,                                  &
@@ -134,6 +140,11 @@
           INTENT(IN   ) ::                                             &
                                                      xlat,             &
                                                      xlong
+!lm Add snow height, snow cover and ice fraction to photolysis in order to
+!   calculate snow- and ice-dependent UV albedos in Fast-J
+   REAL,  DIMENSION( ims:ime , jms:jme )                   ,           &
+          INTENT(IN   ) ::     snowh, snowc, xice, lu_index
+!lm
    TYPE(grid_config_rec_type),  INTENT(IN   )    :: config_flags
 
    LOGICAL, INTENT(IN)  :: haveaer
@@ -173,6 +184,7 @@
                ims,ime, jms,jme, kms,kme,                              &
                its,ite, jts,jte, kts,kte                               )
      CASE (PHOTFASTJ)
+! jdf add ivgtyp for mexico city
        call wrf_debug(15,'calling fastj_driver')
        call fastj_driver(id,curr_secs,dtstep,config_flags,             &
                gmt,julday,t_phy,moist,p8w,p_phy,                       &
@@ -182,6 +194,11 @@
                ph_ch3coch3,ph_ch3coc2h5,ph_hcocho,ph_ch3cocho,         &
                ph_hcochest,ph_ch3o2h,ph_ch3coo2h,ph_ch3ono2,ph_hcochob,&
                ph_n2o5,                                                &
+               ivgtyp,                                                 &
+!lm Add land cover type, snow height, snow cover and ice fraction to photolysis
+!   in order to calculate snow- and ice-dependent UV albedos in Fast-J
+               snowh, snowc, xice,                                     &
+!lm
                tauaer1,tauaer2,tauaer3,tauaer4,                        &
                gaer1,gaer2,gaer3,gaer4,                                &
                waer1,waer2,waer3,waer4,                                &
diff --git a/phys/module_mp_morr_two_moment.F b/phys/module_mp_morr_two_moment.F
index 4869e12..d70451f 100644
--- a/phys/module_mp_morr_two_moment.F
+++ b/phys/module_mp_morr_two_moment.F
@@ -905,7 +905,15 @@ SUBROUTINE MP_MORR_TWO_MOMENT(ITIMESTEP,                       &
       SNOWNCV(i,j) = SNOWPRT1D
       GRAUPELNC(i,j) = GRAUPELNC(I,J)+GRPLPRT1D
       GRAUPELNCV(i,j) = GRPLPRT1D
-      SR(i,j) = SNOWRT1D/(PRECPRT1D+1.E-12)
+!lm      SR(i,j) = SNOWRT1D/(PRECPRT1D+1.E-12)
+!lm The calculation of SR often gives results out of the 0-1 range (when prec
+!quantities are small). Due to another problem in noahlsm this can cause bugs in
+!the snow cover and snow height calcs. I'm fixing the bugs here and in NOAHLSM
+!Ideally, the code should not calculate SR when SNOWRT1D is too small. I'm also
+!still not sure if this is not related to another bug leading to negative
+!SNOWRT1D
+      SR(i,j) = min(1.,max(0.,SNOWRT1D/(PRECPRT1D+1.E-12)))
+!lm
 
 !+---+-----------------------------------------------------------------+
          IF ( PRESENT (diagflag) ) THEN
diff --git a/phys/module_sf_noah_seaice_drv.F b/phys/module_sf_noah_seaice_drv.F
index b7c34ff..ba4453b 100644
--- a/phys/module_sf_noah_seaice_drv.F
+++ b/phys/module_sf_noah_seaice_drv.F
@@ -332,15 +332,16 @@ contains
           ! SR from e.g. Ferrier microphysics
           ! otherwise define from 1st atmos level temperature
 
-          IF (FRPCPN) THEN
-             FFROZP = SR(I,J)
-          ELSE
+!lm see in surface_driver why I commented this          IF (FRPCPN) THEN
+!          IF (FRPCPN) THEN
+!             FFROZP = SR(I,J)
+!          ELSE
              IF (SFCTMP <=  273.15) THEN
                 FFROZP = 1.0
              ELSE
                 FFROZP = 0.0
              ENDIF
-          ENDIF
+!          ENDIF
 
           ! Sea-ice point has deep-level temperature of about -1.8 C
           TBOT = 271.36
diff --git a/phys/module_sf_noahdrv.F b/phys/module_sf_noahdrv.F
index 5c7df67..6dd4dc3 100644
--- a/phys/module_sf_noahdrv.F
+++ b/phys/module_sf_noahdrv.F
@@ -849,15 +849,15 @@ CONTAINS
 ! if "SR" present, set frac of frozen precip ("FFROZP") = snow-ratio ("SR", range:0-1)
 ! SR from e.g. Ferrier microphysics
 ! otherwise define from 1st atmos level temperature
-       IF(FRPCPN) THEN
-          FFROZP=SR(I,J)
-        ELSE
+!lm       IF(FRPCPN) THEN
+!lm comment this, see surface driver          FFROZP=SR(I,J)
+!lm        ELSE
           IF (SFCTMP <=  273.15) THEN
             FFROZP = 1.0
 	  ELSE
 	    FFROZP = 0.0
 	  ENDIF
-        ENDIF
+!lm        ENDIF
 !***
         IF((XLAND(I,J)-1.5).GE.0.)THEN                                  ! begining of land/sea if block
 ! Open water points
@@ -5246,7 +5246,6 @@ SUBROUTINE lsm_mosaic(DZ8W,QV3D,P8W3D,T3D,TSK,                      &
 
           ENDDO
       ENDDO
-      
   !===========================================================================   
   ! initilize the variables
   !===========================================================================   
diff --git a/phys/module_surface_driver.F b/phys/module_surface_driver.F
index aef9e7d..bb8aee0 100644
--- a/phys/module_surface_driver.F
+++ b/phys/module_surface_driver.F
@@ -2593,9 +2593,15 @@ CONTAINS
 !          PRESENT(frc_urb2d) .AND. PRESENT(utype_urb2d)   .AND.      &
                                                       .TRUE. ) THEN
 !------------------------------------------------------------------
-         IF( PRESENT(sr) ) THEN
-           frpcpn=.true.
-         ENDIF
+
+!lm Comment this, as this can cause two problems: some of the SR values seem
+!wrong (this is probably an issue with the Morrison microphysics) and SR is 0
+!over most of the domain (no grid scale precip). This means that SR can
+!possibly prevent the cumulus precipitation to ever be considered as snow 
+!(check this)
+!lm         IF( PRESENT(sr) ) THEN
+!lm           frpcpn=.true.
+!lm         ENDIF
          IF ( FRACTIONAL_SEAICE == 1) THEN
             ! The fields passed to LSM need to represent the full ice values, not
             ! the fractional values.  Convert ALBEDO and EMISS from the blended value 
-- 
2.31.1

