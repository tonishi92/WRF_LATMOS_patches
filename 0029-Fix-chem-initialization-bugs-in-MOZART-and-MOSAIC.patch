From 3463032d7dd481844d4c9e53f135f156c28a23c6 Mon Sep 17 00:00:00 2001
From: tonishi92 <tatsuo.onishi@gmail.com>
Date: Tue, 17 Jan 2023 13:29:30 +0100
Subject: [PATCH 29/49] Fix chem initialization bugs in MOZART and MOSAIC

Add initializations for several arrays in MOZART and MOSAIC in chem, in
the aerosol chemistry code, in the profile initialization for chemical
variables in real, and in the irr_diag reaction rate output.
These issues trigger crashes at runtime at the model initialization
stage when using debug compilation flags, and were preventing the use of
debug options for investigating other bugs.
In addition, when using gfortran, these arrays would be be initialized
with arbitrary values, then used in the chemistry, causing some aerosol
output to diverge to 0 or infinity.

A fix is applied to initialize a diagnostic array "irr_rates" for all chem_opt.
A "not allocated" error (when compiled with a debug option) is avoided
not only for T1_MOZCART_KPP, MOZCART_KPP, MOZART_MOSAIC_4BIN_AQ_KPP, MOZART_MOSAIC_4BIN_KPP
but also all other chemistry options (chem_opt).
---
 chem/chem_driver.F            | 35 ++++++++++++++++++++++++++++++++
 chem/module_input_chem_data.F | 38 ++++++++++++++++++++---------------
 chem/module_mosaic_gly.F      |  7 +++++++
 chem/module_mosaic_therm.F    |  3 +++
 4 files changed, 67 insertions(+), 16 deletions(-)

diff --git a/chem/chem_driver.F b/chem/chem_driver.F
index e73eab16..8c3ee575 100755
--- a/chem/chem_driver.F
+++ b/chem/chem_driver.F
@@ -582,6 +582,11 @@
            CALL wrf_error_fatal( trim(msg) )
          ENDIF
          num_irr_diag = num_irr_diag_mozart_mosaic_4bin
+       ELSE
+         ! Placeholders to avoid calling kpp_mechanism_driver with unallocated
+         ! arrays as arguments
+         ALLOCATE( irr_rates(1, 1, 1, 1), stat=astat )
+         num_irr_diag = 0
        ENDIF
 #endif
        haveaer = .true.
@@ -595,6 +600,11 @@
            CALL wrf_error_fatal( trim(msg) )
          ENDIF
          num_irr_diag = num_irr_diag_mozart_mosaic_4bin_aq
+       ELSE
+         ! Placeholders to avoid calling kpp_mechanism_driver with unallocated
+         ! arrays as arguments
+         ALLOCATE( irr_rates(1, 1, 1, 1), stat=astat )
+         num_irr_diag = 0
        ENDIF
 #endif
        haveaer = .true.
@@ -666,6 +676,11 @@
            CALL wrf_error_fatal( trim(msg) )
          ENDIF
          num_irr_diag = num_irr_diag_mozcart
+       ELSE
+         ! Placeholders to avoid calling kpp_mechanism_driver with unallocated
+         ! arrays as arguments
+         ALLOCATE( irr_rates(1, 1, 1, 1), stat=astat )
+         num_irr_diag = 0
        ENDIF
 #endif
      CASE (T1_MOZCART_KPP)
@@ -678,6 +693,11 @@
            CALL wrf_error_fatal( trim(msg) )
          ENDIF
          num_irr_diag = num_irr_diag_t1_mozcart
+       ELSE
+         ! Placeholders to avoid calling kpp_mechanism_driver with unallocated
+         ! arrays as arguments
+         ALLOCATE( irr_rates(1, 1, 1, 1), stat=astat )
+         num_irr_diag = 0
        ENDIF
 #endif
      CASE (CB05_SORG_AQ_KPP)
@@ -705,6 +725,21 @@
        CALL wrf_debug(15,'calling chem_opt=? from chem_driver')
        endif
    END SELECT chem_select                              
+
+   ! If chem_opt other than T1_MOZCART_KPP, MOZCART_KPP, MOZART_MOSAIC_4BIN_AQ_KPP, 
+   ! MOZART_MOSAIC_4BIN_KPP, irr_rates is not allocated and raises an error 
+   ! when compiled with a debug option. 
+   ! If irr_rates is not allocated, it is done here for all chem_opt's
+   IF( .not. allocated( irr_rates ) ) THEN
+     ! Placeholders to avoid calling kpp_mechanism_driver with unallocated
+     ! arrays as arguments
+     ALLOCATE( irr_rates(1, 1, 1, 1), stat=astat )
+     num_irr_diag = 0
+   ENDIF
+
+
+
+
    tracer_select: SELECT CASE(config_flags%tracer_opt)
     CASE (TRACER_SMOKE)
        CALL wrf_debug(15,'tracer mode: 1 tracer for fires')
diff --git a/chem/module_input_chem_data.F b/chem/module_input_chem_data.F
index d4ea248b..933f32bd 100755
--- a/chem/module_input_chem_data.F
+++ b/chem/module_input_chem_data.F
@@ -342,7 +342,11 @@ SUBROUTINE setup_gasprofile_maps(chem_opt, numgas)
      SAPRC99_MOSAIC_8BIN_VBS2_AQ_KPP, SAPRC99_MOSAIC_8BIN_VBS2_KPP)!BSINGH(12/04/2013): Added SAPRC 8 bin and non-aq on 04/03/2014)
      call setup_gasprofile_map_saprcnov
 
-
+  case (MOZCART_KPP, T1_MOZCART_KPP, MOZART_KPP, &
+        MOZART_MOSAIC_4BIN_KPP, MOZART_MOSAIC_4BIN_AQ_KPP)
+     !LMarelle Need to define a MOZART case here or else iref can take
+     ! out-of-bounds values in make_chem_profile
+     call setup_gasprofile_map_mozart(numgas)
 
   case (CBMZ, CBMZ_BB, CBMZ_BB_KPP, &
         CBMZ_MOSAIC_KPP, CBMZ_MOSAIC_4BIN,  &
@@ -373,24 +377,9 @@ SUBROUTINE setup_gasprofile_maps(chem_opt, numgas)
      call wrf_debug("setup_profile_maps: nothing done for volcanic ash")
   case (DUST)
      call wrf_debug("setup_profile_maps: nothing done for volcanic ash")
-  case (MOZART_KPP)
-     call wrf_debug("setup_profile_maps: nothing done for mozart_kpp")
-
   case (CRIMECH_KPP, CRI_MOSAIC_8BIN_AQ_KPP, CRI_MOSAIC_4BIN_AQ_KPP)
       call wrf_debug("setup_profile_maps: nothing done for crimech")
 
-  case (MOZCART_KPP)
-     call wrf_debug("setup_profile_maps: nothing done for mozcart_kpp")
-
-  case (T1_MOZCART_KPP)
-     call wrf_debug("setup_profile_maps: nothing done for t1_mozcart_kpp")
-
-  case (MOZART_MOSAIC_4BIN_KPP)
-     call wrf_debug("setup_profile_maps: nothing done for mozart_mosaic_4bin_kpp")
-
-  case (MOZART_MOSAIC_4BIN_AQ_KPP)
-     call wrf_debug("setup_profile_maps: nothing done for mozart_mosaic_4bin_aq_kpp")
-
  case (CO2_TRACER,GHG_TRACER)
      call wrf_debug("setup_profile_maps: nothing done for the GHG options")
 
@@ -469,6 +458,23 @@ SUBROUTINE setup_gasprofile_map_saprcnov
 
 END SUBROUTINE setup_gasprofile_map_saprcnov
 
+!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+! Maps for indices and fractional apportionment of the default
+! species profiles to the MOZART species for ICs and BCs.
+! Louis Marelle, 2022/09/27
+!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+SUBROUTINE setup_gasprofile_map_mozart(numgas)
+  integer, intent(in) :: numgas
+  iref(:)    = 7 !default value
+  fracref(:)    = 1. !default value
+  ggnam(:) = 'JUNK' !default value
+  !TODO fill using this, need to make sure the order of species stay the same in all submechanisms or find a workaround
+! package   mozart_kpp        chem_opt==111                  -          chem:o3,o1d_cb4,o,no,no2,no3,n2o5,hno3,hno4,so2,ho,ho2,h2o2,sulf,co,hcho,ch3ooh,ch3o2,ch4,h2,eo2,ch3cooh,c2h4,n2o,ch3oh,aco3,acet,mgly,paa,gly,c3h6ooh,pan,mpan,macr,mvk,c3h6,etooh,prooh,acetp,xooh,onitr,isooh,acetol,glyald,mek,eto2,open,alkooh,mekooh,tolooh,terpooh,ald,mco3,c2h5oh,eo,c2h6,c3h8,pro2,po2,aceto2,bigene,bigalk,eneo2,alko2,isopr,iso2,mvko2,mvkooh,hydrald,xo2,c10h16,terpo2,tol,cres,to2,xoh,onit,isopn,dms,nh3,meko2
+! package   mozcart_kpp       chem_opt==112                  -          chem:o3,o1d_cb4,o,no,no2,no3,n2o5,hno3,hno4,so2,ho,ho2,h2o2,sulf,co,hcho,ch3ooh,ch3o2,ch4,h2,eo2,ch3cooh,c2h4,n2o,ch3oh,aco3,acet,mgly,paa,gly,c3h6ooh,pan,mpan,macr,mvk,c3h6,etooh,prooh,acetp,xooh,onitr,isooh,acetol,glyald,mek,eto2,open,alkooh,mekooh,tolooh,terpooh,ald,mco3,c2h5oh,eo,c2h6,c3h8,pro2,po2,aceto2,bigene,bigalk,eneo2,alko2,isopr,iso2,mvko2,mvkooh,hydrald,xo2,c10h16,terpo2,tol,cres,to2,xoh,onit,isopn,dms,nh3,meko2
+! package  t1_mozcart_kpp     chem_opt==114                  -          chem:alknit,alkooh,apin,bcary,benzene,benzooh,bepomuc,open,bigald1,bigald2,bigald3,bigald4,bigalk,bigene,bpin,bzald,bzooh,c2h2,c2h4,c2h5oh,etooh,c2h6,c3h6,prooh,c3h8,c6h5ooh,hcho,ald,ch3cn,acet,mgly,ch3cooh,paa,ch3oh,ch3ooh,ch4,co,cres,dms,eooh,glyald,gly,h2,h2o2,hcn,hcooh,hmprop,hmpropo2,hno3,hno4,honitr,hpald,acetol,hydrald,iepox,isopr,isopnita,isopnitb,isopn,isopnooh,isooh,limon,macr,mvkooh,malo2,mbo,mbono3o2,mboo2,mboooh,mek,mekooh,mpan,mvk,myrc,n2o,n2o5,nc4ch2oh,nc4cho,nh3,no,no2,no3,noa,nterpooh,o,o3,onitr,pan,pbznit,pheno,phenol,phenooh,c3h6ooh,acetp,so2,sulf,tepomuc,terp2ooh,terpnit,terpooh,terprod1,terprod2,tolooh,tol,xooh,xylenes,xylenooh,xylol,xylolooh,acbzo2,alko2,benzo2,bzoo,eto2,pro2,c6h5o2,aco3,ch3o2,dicarbo2,eneo2,eo,eo2,ho2,hoch2oo,isopao2,isopbo2,mvko2,mco3,mdialo2,meko2,nterpo2,o1d,ho,pheno2,po2,aceto2,terp2o2,terpo2,to2,xo2,xyleno2,xylolo2
+! package mozart_mosaic_4bin_kpp    chem_opt==201   -                        chem:o3,o1d_cb4,o,no,no2,no3,n2o5,hno3,hno4,so2,ho,ho2,h2o2,sulf,co,hcho,hcooh,c2h2,hoch2oo,ch3ooh,ch3o2,ch4,h2,eo2,ch3cooh,c2h4,n2o,ch3oh,aco3,acet,mgly,paa,gly,c3h6ooh,pan,mpan,macr,mvk,c3h6,etooh,prooh,acetp,xooh,onitr,isooh,acetol,glyald,mek,eto2,open,alkooh,mekooh,tolooh,terpooh,ald,mco3,c2h5oh,eo,c2h6,c3h8,pro2,po2,aceto2,bigene,bigalk,eneo2,alko2,isopr,iso2,mvko2,mvkooh,hydrald,xo2,apin,bpin,limon,myrc,bcary,terprod1,terprod2,terp2o2,terp2ooh,nterpo2,terpo2,tol,cres,to2,onit,isopn,dms,mbo,mboo2,hmprop,hmpropo2,mboooh,mbono3o2,nh3,nume,den,voca,vocbb,smpa,smpbb,biog1_c,biog1_o,benzene,phen,bepomuc,benzo2,pheno2,pheno,phenooh,c6h5o2,c6h5ooh,benzooh,bigald1,bigald2,bigald3,bigald4,malo2,tepomuc,bzoo,bzooh,bald,acbzo2,dicarbo2,mdialo2,xyl,xylol,xylolo2,xylolooh,xyleno2,xylenooh,pbznit,hono,meko2
+! package   mozart_mosaic_4bin_aq_kpp  chem_opt==202           -             chem:o3,o1d_cb4,o,no,no2,no3,n2o5,hno3,hno4,so2,ho,ho2,h2o2,sulf,co,hcho,hcooh,c2h2,hoch2oo,ch3ooh,ch3o2,ch4,h2,eo2,ch3cooh,c2h4,n2o,ch3oh,aco3,acet,mgly,paa,gly,c3h6ooh,pan,mpan,macr,mvk,c3h6,etooh,prooh,acetp,xooh,onitr,isooh,acetol,glyald,mek,eto2,open,alkooh,mekooh,tolooh,terpooh,ald,mco3,c2h5oh,eo,c2h6,c3h8,pro2,po2,aceto2,bigene,bigalk,eneo2,alko2,isopr,iso2,mvko2,mvkooh,hydrald,xo2,apin,bpin,limon,myrc,bcary,terprod1,terprod2,terp2o2,terp2ooh,nterpo2,terpo2,tol,cres,to2,onit,isopn,dms,mbo,mboo2,hmprop,hmpropo2,mboooh,mbono3o2,nh3,nume,den,cvasoaX,cvasoa1,cvasoa2,cvasoa3,cvasoa4,cvbsoaX,cvbsoa1,cvbsoa2,cvbsoa3,cvbsoa4,benzene,phen,bepomuc,benzo2,pheno2,pheno,phenooh,c6h5o2,c6h5ooh,benzooh,bigald1,bigald2,bigald3,bigald4,malo2,tepomuc,bzoo,bzooh,bald,acbzo2,dicarbo2,mdialo2,xyl,xylol,xylolo2,xylolooh,xyleno2,xylenooh,pbznit,hono,meko2
+END SUBROUTINE setup_gasprofile_map_mozart
 
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 ! Maps for indices and fractional apportionment of the default
diff --git a/chem/module_mosaic_gly.F b/chem/module_mosaic_gly.F
index df34437e..9147e1ae 100644
--- a/chem/module_mosaic_gly.F
+++ b/chem/module_mosaic_gly.F
@@ -171,6 +171,13 @@
       dr1_nh4 = 0.0
       dr1_oh  = 0.0
       dg_sfc  = 0.0
+      ! LMarelle: this subroutine is also called from rk4 (renamed "derivs" in
+      ! there as an external), with y=yt, that is y extrapolated at a half
+      ! time step from dydx.  However since dydx is not calculated for all
+      ! species, the extrapolation can give arbitrary large or negative dydx
+      ! values, and the routine can fail for the corresponding yt. Initialize
+      ! dydx = 0 to avoid this
+      dydx(:) = 0.0
 
       ! convert gas-phase glyoxal concentration
       ! -------------------------------------------------------------
diff --git a/chem/module_mosaic_therm.F b/chem/module_mosaic_therm.F
index f4e8ae01..a74b7b20 100644
--- a/chem/module_mosaic_therm.F
+++ b/chem/module_mosaic_therm.F
@@ -8537,6 +8537,9 @@
 
 ! calculate gas diffusivity and mean free path for condensing gases
 ! ioa
+      ! freepath has to be initialized as 0.0 or it can take arbitrary values
+      ! causing floating point errors in fuchs_sutugin
+      freepath(:) = 0.0
       do iv = 1, ngas_ioa
         speed  = mean_molecular_speed(t_k,mw_vol(iv))	! cm/s
         dg(iv) = gas_diffusivity(t_k,p_atm,mw_vol(iv),v_molar(iv)) ! cm^2/s
-- 
2.31.1

