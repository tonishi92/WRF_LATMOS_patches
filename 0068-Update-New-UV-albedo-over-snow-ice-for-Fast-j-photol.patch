From 1af2eaa48fc659c3ada72fd10e97588a8f4b0924 Mon Sep 17 00:00:00 2001
From: tonishi92 <tatsuo.onishi@gmail.com>
Date: Tue, 13 Dec 2022 18:28:21 +0100
Subject: [PATCH 68/71] [Update] New UV albedo over snow+ice for Fast-j
 photolysis

TYPE : Patch application

Description:
  See the description below in the original patch

List of modified files:
  * chem/module_phot_fastj.F

===== Original Patch ========================================================
In order to avoid a confusion, '=== ' is placed at the beginning of each line

=== Uses a higher surface UV-albedo over snow- and ice-covered surfaces in Fast-J
=== photolysis. The snow/ice albedo value is from Tanskanen and Manninen, ACP,
=== 2007, and is weighted by the snow and ice covers.
=== ---
===  chem/chem_driver.F       |  1 +
===  chem/module_phot_fastj.F | 34 +++++++++++++++++++++++++++++++++-
===  chem/photolysis_driver.F |  5 +++++
===  3 files changed, 39 insertions(+), 1 deletion(-)
===
=== diff --git a/chem/chem_driver.F b/chem/chem_driver.F
=== index 7d5c722b..e9894f67 100755
=== --- a/chem/chem_driver.F
=== +++ b/chem/chem_driver.F
=== @@ -983,6 +983,7 @@
===                config_flags%track_tuv_num,                                             &
===                grid%radfld,grid%adjcoe,grid%phrate,                                    &
===                grid%track_wc,grid%track_zref,                                          &
=== +              grid%snowh, grid%snowc, grid%xice,                                      &
===                grid%tauaer1,grid%tauaer2,grid%tauaer3,grid%tauaer4,                    &
===                grid%gaer1,grid%gaer2,grid%gaer3,grid%gaer4,                            &
===                grid%waer1,grid%waer2,grid%waer3,grid%waer4,                            &
=== diff --git a/chem/module_phot_fastj.F b/chem/module_phot_fastj.F
=== index 25684dbe..bf09e4da 100644
=== --- a/chem/module_phot_fastj.F
=== +++ b/chem/module_phot_fastj.F
=== @@ -76,6 +76,7 @@
===                 ph_ch3coch3,ph_ch3coc2h5,ph_hcocho,ph_ch3cocho,         &
===                 ph_hcochest,ph_ch3o2h,ph_ch3coo2h,ph_ch3ono2,ph_hcochob,&
===                 ph_n2o5,                                                &
=== +               snowh, snowc, xice,                                     &
===                 tauaer1,tauaer2,tauaer3,tauaer4,                        &
===                 gaer1,gaer2,gaer3,gaer4,                                &
===                 waer1,waer2,waer3,waer4,                                &
=== @@ -165,6 +166,8 @@
===     REAL, DIMENSION( ims:ime, kms:kme, jms:jme, 1:4 ),               &
===           INTENT(IN ) ::                                             &
===             l2aer,l3aer,l4aer,l5aer,l6aer,l7aer
=== +   REAL, DIMENSION( ims:ime , jms:jme ),                            &
=== +         INTENT(IN   ) :: snowh, snowc, xice
===
===     REAL, DIMENSION( ims:ime, kms:kme, jms:jme, num_chem ),         &
===           INTENT(INOUT ) ::                                chem
=== @@ -207,6 +210,8 @@
===        real, dimension(kts:kte+1) :: zatw
===
===        real valuej(kte,nphoto_fastj)
=== +      real snow_height, snow_cover, ice_fraction
=== +      integer if_fractseaice !config flag for fractional_seaice
===
===        logical processingAerosols
===
=== @@ -328,6 +333,12 @@
===  ! set lat, long
===  	  sla = xlat(iclm,jclm)
===  	  slo = xlong(iclm,jclm)
=== +! snow height and cover, ice cover, to set the UV albedo in photolysis
=== +! calculations
=== +          snow_height = snowh(iclm, jclm)
=== +          snow_cover = snowc(iclm, jclm)
=== +          ice_fraction = xice(iclm, jclm)
=== +          if_fractseaice = config_flags%fractional_seaice
===  ! set column pressures, temperature, and ozone
===  	  psfc = p8w(iclm,1,jclm) * 10. ! convert pascals to dynes/cm2
===  	  do k = kts, lpar
=== @@ -348,6 +359,8 @@
===  	  call interface_fastj(tmidh,sla,slo,julday,           &
===             pbnd, psfc, temp, ozone,                        &
===             dz, cloudmr, airdensity, relhum, zatw,          &
=== +           snow_height, snow_cover, ice_fraction,          &
=== +           if_fractseaice,                                 &
===             iclm, jclm, lpar, jpnl,                         &
===             curr_secs, valuej, cos_sza, processingAerosols, &
===             sizeaer,extaer,waer,gaer,tauaer,l2,l3,l4,l5,l6,l7)
=== @@ -508,6 +521,8 @@
===          subroutine interface_fastj(tmidh,sla,slo,julian_day,   &
===               pbnd, psfc, temp, ozone,                          &
===               dz, cloudmr, airdensity, relhum, zatw,            &
=== +             snow_height, snow_cover, ice_fraction,            &
=== +             if_fractseaice,                                   &
===               isvode, jsvode, lpar, jpnl,                       &
===        	     curr_secs, valuej, cos_sza, processingAerosols,   &
===               sizeaer,extaer,waer,gaer,tauaer,l2,l3,l4,l5,l6,l7)
=== @@ -606,6 +621,12 @@
===     real, dimension (nspint, kmaxd+1) :: l2,l3,l4,l5,l6,l7
===     data wavmid     &
===         / 0.30e-4, 0.40e-4, 0.60e-4 ,0.999e-04 /
=== +! Broadband UV albedo for snow-covered surfaces and for bare ground (unitless 0-1)
=== +   real, parameter ::  snowice_uvalb = 0.836 ! From Tanskanen and Manninen, 2007.
=== +   real, parameter ::  ground_uvalb = 0.055 ! From the original implementation of this module
=== +! Snow height (m), snow cover (unitless 0-1), ice fraction (unitless 0-1)
=== +   real snow_height, snow_cover, ice_fraction !snow height in meters
=== +  integer if_fractseaice !config flag for fractional_seaice
===  !jdf
===  	real pbnd(0:lpar), psfc
===  	real temp(lpar), ozone(lpar), surface_albedo
=== @@ -724,7 +745,18 @@
===  	   col_ozone(k) = ozone(k)
===  	end do
===
=== - 	surface_albedo=0.055
=== +! Use a different surface albedo over snow- and ice-covered surfaces
=== +        if (ice_fraction >= 0.15) then ! if ice > 15% threshold (NSIDC)
=== +          if(if_fractseaice == 1) then ! if fractional sea ice
=== +            surface_albedo = snowice_uvalb * ice_fraction + (1.0 - ice_fraction) * ground_uvalb
=== +          else
=== +            surface_albedo = snowice_uvalb
=== +          endif
=== +        elseif( snow_height >= 0.01) then ! 10 cm threshold for snow-covered land from MOZART
=== +          surface_albedo = snow_cover * snowice_uvalb + (1.0 - snow_cover) * ground_uvalb
=== +        else
=== +          surface_albedo = ground_uvalb
=== +        end if
===
===  ! set aerosol parameters needed by Fast-J
===          if (processingAerosols) then
=== diff --git a/chem/photolysis_driver.F b/chem/photolysis_driver.F
=== index 4381798e..2063936c 100755
=== --- a/chem/photolysis_driver.F
=== +++ b/chem/photolysis_driver.F
=== @@ -22,6 +22,7 @@
===                 nref0, nw0, tuv_jmax0,                                    &
===                 ph_radfld, ph_adjcoe, ph_prate,                           &
===                 wc, zref,                                                 &
=== +               snowh, snowc, xice,                                       &
===                 tauaer1,tauaer2,tauaer3,tauaer4,                          &
===                 gaer1,gaer2,gaer3,gaer4,                                  &
===                 waer1,waer2,waer3,waer4,                                  &
=== @@ -100,6 +101,9 @@
===           OPTIONAL,                                                     &
===           INTENT(INOUT ) ::                                             &
===             gd_cloud,gd_cloud2
=== +   real, dimension( ims:ime , jms:jme ),                               &
=== +            intent(in   ) :: snowh, snowc, xice
=== +
===  !
===  ! arrays that hold the aerosol optical properties
===  !
=== @@ -181,6 +185,7 @@
===                 ph_ch3coch3,ph_ch3coc2h5,ph_hcocho,ph_ch3cocho,         &
===                 ph_hcochest,ph_ch3o2h,ph_ch3coo2h,ph_ch3ono2,ph_hcochob,&
===                 ph_n2o5,                                                &
=== +               snowh, snowc, xice,                                     &
===                 tauaer1,tauaer2,tauaer3,tauaer4,                        &
===                 gaer1,gaer2,gaer3,gaer4,                                &
===                 waer1,waer2,waer3,waer4,                                &
=== --
=== 2.31.1
===
---
 chem/module_phot_fastj.F | 83 ++++++++++++++++++++++++----------------
 1 file changed, 51 insertions(+), 32 deletions(-)

diff --git a/chem/module_phot_fastj.F b/chem/module_phot_fastj.F
index ea3f117..91498e6 100644
--- a/chem/module_phot_fastj.F
+++ b/chem/module_phot_fastj.F
@@ -227,7 +227,7 @@
  	     
       real valuej(kte,nphoto_fastj)
 !lm  snow height, snow cover, ice fraction and land use at i, j
-      real snow_height, snow_cover, ice_fract
+      real snow_height, snow_cover, ice_fraction
       integer landtype
       integer if_fractseaice !config flag for fractional_seaice
 !lm
@@ -355,7 +355,7 @@
 !lm snow height and cover, ice cover, land use type to pass to the phot scheme
           snow_height=snowh(iclm,jclm)
           snow_cover=snowc(iclm,jclm)
-          ice_fract=xice(iclm,jclm)
+          ice_fraction=xice(iclm,jclm)
           landtype=int(luse2usgs(ivgtyp(iclm,jclm)))
           if_fractseaice=config_flags%fractional_seaice
 !lm
@@ -382,7 +382,7 @@
            dz, cloudmr, airdensity, relhum, zatw,          &
 !lm Add snow height, snowcover, icecover, landuse cat, and fractional sea ice
 !flag
-           snow_height, snow_cover, ice_fract,             &
+           snow_height, snow_cover, ice_fraction,             &
            landtype, if_fractseaice,                       &
 !lm
            iclm, jclm, lpar, jpnl,                         &
@@ -547,7 +547,7 @@
              dz, cloudmr, airdensity, relhum, zatw,            &
 !lm Add snow height, snowcover, icecover, landuse cat, and fractional sea ice
 !flag
-             snow_height, snow_cover, ice_fract,               & 
+             snow_height, snow_cover, ice_fraction,               & 
              landtype, if_fractseaice,                         &
 !lm
              isvode, jsvode, lpar, jpnl,                       &
@@ -651,18 +651,25 @@
    real, dimension (nspint, kmaxd+1) :: l2,l3,l4,l5,l6,l7
    data wavmid     &
        / 0.30e-4, 0.40e-4, 0.60e-4 ,0.999e-04 /
-!lm Broadband UV albedo for snow covered surfaces, for each of the 24
-!   USGS land use categories (unitless)
-   data snow_uvalb & !lm From Tanskanen and Manninen, 2007.
-       / 0.836, 0.376, 0.376, 0.376, 0.376, 0.376, 0.720, 0.558, &
-         0.558, 0.720, 0.406, 0.406, 0.278, 0.278, 0.278, 0.836, &
-         0.720, 0.558, 0.836, 0.720, 0.558, 0.558, 0.836, 0.836 /
-! Snow height, snow cover, ice fraction and land use at i, j
-      real snow_height, snow_cover, ice_fract !snow height in meters
-      integer landtype
-      integer if_fractseaice !config flag for fractional_seaice
-!lm
-!jdf
+! Broadband UV albedo for snow-covered surfaces and for bare ground (unitless 0-1)
+   real, parameter ::  snowice_uvalb = 0.836 ! From Tanskanen and Manninen, 2007.
+   real, parameter ::  ground_uvalb = 0.055 ! From the original implementation of this module
+! Snow height (m), snow cover (unitless 0-1), ice fraction (unitless 0-1)
+   real snow_height, snow_cover, ice_fraction !snow height in meters
+   integer landtype
+   integer if_fractseaice !config flag for fractional_seaice
+!!lm Broadband UV albedo for snow covered surfaces, for each of the 24
+!!   USGS land use categories (unitless)
+!   data snow_uvalb & !lm From Tanskanen and Manninen, 2007.
+!       / 0.836, 0.376, 0.376, 0.376, 0.376, 0.376, 0.720, 0.558, &
+!         0.558, 0.720, 0.406, 0.406, 0.278, 0.278, 0.278, 0.836, &
+!         0.720, 0.558, 0.836, 0.720, 0.558, 0.558, 0.836, 0.836 /
+!! Snow height, snow cover, ice fraction and land use at i, j
+!      real snow_height, snow_cover, ice_fract !snow height in meters
+!      integer landtype
+!      integer if_fractseaice !config flag for fractional_seaice
+!!lm
+!!jdf
 	real pbnd(0:lpar), psfc
 	real temp(lpar), ozone(lpar), surface_albedo
 	real dz(lpar), cloudmr(lpar), airdensity(lpar), relhum(lpar), zatw(lpar+1)
@@ -780,22 +787,34 @@
 	   col_ozone(k) = ozone(k)
 	end do
 
-!lm 	surface_albedo=0.055
-!lm: use a different surface albedo over snow covered surfaces. Values
-! by Tanskanen and Manninen, ACP, 2007
-        surface_albedo = 0.055 !default value from PNNL, about right for most ice/snow free land surfaces
-        if( landtype .ge. 1 .and. landtype .le. 24) then
-          if( snow_height >= 0.01 .and. snow_cover >= 0.01) & !10 cm threshold from MOZART, 10% threshold seems right
-            surface_albedo = snow_cover*snow_uvalb(landtype) + (1.0 - snow_cover) *0.055
-          if (ice_fract >= 0.15) then !15% is the typical threshold for sea ice extent (see NSIDC)
-            if(if_fractseaice == 1) then
-              surface_albedo = 0.836 * ice_fract + (1.0 - ice_fract) * 0.055 !fractional sea ice
-            else
-              surface_albedo = 0.836
-            endif
-          endif !ice_fract exceeds the threshold of 15%
-        endif !landtype is in the USGS range, 1 to 24
-!lm
+!!lm 	surface_albedo=0.055
+!!lm: use a different surface albedo over snow covered surfaces. Values
+!! by Tanskanen and Manninen, ACP, 2007
+!        surface_albedo = 0.055 !default value from PNNL, about right for most ice/snow free land surfaces
+!        if( landtype .ge. 1 .and. landtype .le. 24) then
+!          if( snow_height >= 0.01 .and. snow_cover >= 0.01) & !10 cm threshold from MOZART, 10% threshold seems right
+!            surface_albedo = snow_cover*snow_uvalb(landtype) + (1.0 - snow_cover) *0.055
+!          if (ice_fract >= 0.15) then !15% is the typical threshold for sea ice extent (see NSIDC)
+!            if(if_fractseaice == 1) then
+!              surface_albedo = 0.836 * ice_fract + (1.0 - ice_fract) * 0.055 !fractional sea ice
+!            else
+!              surface_albedo = 0.836
+!            endif
+!          endif !ice_fract exceeds the threshold of 15%
+!        endif !landtype is in the USGS range, 1 to 24
+!!lm
+! Use a different surface albedo over snow- and ice-covered surfaces
+        if (ice_fraction >= 0.15) then ! if ice > 15% threshold (NSIDC)
+          if(if_fractseaice == 1) then ! if fractional sea ice
+            surface_albedo = snowice_uvalb * ice_fraction + (1.0 - ice_fraction) * ground_uvalb
+          else
+            surface_albedo = snowice_uvalb
+          endif
+        elseif( snow_height >= 0.01) then ! 10 cm threshold for snow-covered land from MOZART
+          surface_albedo = snow_cover * snowice_uvalb + (1.0 - snow_cover) * ground_uvalb
+        else
+          surface_albedo = ground_uvalb
+        end if
 
 
 ! set aerosol parameters needed by Fast-J	                         	         	
-- 
2.31.1

